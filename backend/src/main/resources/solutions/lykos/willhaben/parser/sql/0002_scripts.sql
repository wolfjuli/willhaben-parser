CREATE TABLE functions
(
    id       SMALLINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    function TEXT NOT NULL,
    name     TEXT
);

CREATE TABLE scripts
(
    id           SMALLINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    attribute_id SMALLINT NOT NULL REFERENCES attributes (id) ON DELETE CASCADE ON UPDATE CASCADE,
    name TEXT
);

CREATE TABLE script_functions
(
    script_id   SMALLINT NOT NULL REFERENCES scripts (id) ON DELETE CASCADE ON UPDATE CASCADE,
    function_id SMALLINT NOT NULL REFERENCES functions (id) ON DELETE CASCADE ON UPDATE CASCADE,
    ord         SMALLINT NOT NULL,
    PRIMARY KEY (script_id, function_id, ord)
);

CREATE MATERIALIZED VIEW folded_scripts AS
SELECT script_id,
       attribute_id,
       '(v, r) => {' || funs || ' return ' || folded || 'v, r' || repeat(')', count::INT) || '; }' AS script
FROM (SELECT s.id                                                                      AS script_id,
             s.attribute_id,
             count(*)                                                                  AS count,
             string_agg(DISTINCT 'const fun' || f.id || ' = ' || function || '; ', '') AS funs,
             string_agg('fun' || f.id || '(', '' ORDER BY sf.ord DESC)                 AS folded
      FROM scripts s
               JOIN script_functions sf ON s.id = sf.script_id
               JOIN functions f ON sf.function_id = f.id
      GROUP BY s.id, s.attribute_id) x
;

CREATE TABLE listing_points
(
    listing_id   INT      NOT NULL REFERENCES listings (id) ON DELETE CASCADE ON UPDATE CASCADE,
    attribute_id SMALLINT NOT NULL REFERENCES attributes (id) ON DELETE CASCADE ON UPDATE CASCADE,
    script_id    SMALLINT NOT NULL REFERENCES attributes (id) ON DELETE CASCADE ON UPDATE CASCADE,
    points       DOUBLE PRECISION,
    PRIMARY KEY (listing_id, attribute_id, script_id)
);

CREATE INDEX ON listing_points (points);

CREATE VIEW normalized_listings AS
SELECT la.listing_id, jsonb_object_agg(a.attribute, array_to_string(la.values, ',')) AS listing
FROM listing_attributes la
         JOIN attributes a
              ON la.attribute_id = a.id
GROUP BY la.listing_id;


INSERT INTO functions(name, function)
VALUES ('Distance to Graz Jakominiplatz', '(val, row) => {
const [lat1, lon1] = [47.067393, 15.442110];
const [lat2, lon2] = val.split(",");
return Math.cos(Math.sin(lat1)*Math.sin(lat2)+Math.cos(lat1)*Math.cos(lat2)*Math.cos(lon2-lon1))*6371000;
}')


