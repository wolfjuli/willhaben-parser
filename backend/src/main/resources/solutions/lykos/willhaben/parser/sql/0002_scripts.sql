CREATE TABLE functions
(
    id       SMALLINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    function TEXT NOT NULL,
    name     TEXT
);

CREATE TABLE scripts
(
    id           SMALLINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    attribute_id SMALLINT NOT NULL REFERENCES attributes (id) ON DELETE CASCADE ON UPDATE CASCADE,
    name TEXT
);

CREATE TABLE script_functions
(
    script_id   SMALLINT NOT NULL REFERENCES scripts (id) ON DELETE CASCADE ON UPDATE CASCADE,
    function_id SMALLINT NOT NULL REFERENCES functions (id) ON DELETE CASCADE ON UPDATE CASCADE,
    ord         SMALLINT NOT NULL,
    PRIMARY KEY (script_id, function_id, ord)
);

CREATE VIEW folded_scripts AS
SELECT script_id,
       attribute_id,
       '(v, r) => {' || funs || ' return ' || folded || 'v, r' || repeat(')', count::INT) || '; }' AS script
FROM (SELECT s.id                                                                      AS script_id,
             s.attribute_id,
             count(*)                                                                  AS count,
             string_agg(DISTINCT 'const fun' || f.id || ' = ' || function || '; ', '') AS funs,
             string_agg('fun' || f.id || '(', '' ORDER BY sf.ord DESC)                 AS folded
      FROM scripts s
               JOIN script_functions sf ON s.id = sf.script_id
               JOIN functions f ON sf.function_id = f.id
      GROUP BY s.id, s.attribute_id) x
;

CREATE TABLE listing_points
(
    listing_id   INT      NOT NULL REFERENCES listings (id) ON DELETE CASCADE ON UPDATE CASCADE,
    attribute_id SMALLINT NOT NULL REFERENCES attributes (id) ON DELETE CASCADE ON UPDATE CASCADE,
    script_id SMALLINT NOT NULL REFERENCES scripts (id) ON DELETE CASCADE ON UPDATE CASCADE,
    points       DOUBLE PRECISION,
    PRIMARY KEY (listing_id, attribute_id, script_id)
);

CREATE INDEX ON listing_points (points);

CREATE VIEW normalized_listings AS
SELECT la.listing_id, jsonb_object_agg(a.attribute, array_to_string(la.values, ',')) AS listing
FROM listing_attributes la
         JOIN attributes a
              ON la.attribute_id = a.id
GROUP BY la.listing_id;

CREATE OR REPLACE FUNCTION run_script(script_id SMALLINT, attribute_id SMALLINT, val TEXT,
                                      listing JSONB)
    RETURNS DOUBLE PRECISION
    LANGUAGE plv8
AS
$$

const script = eval(
    plv8
        .execute("select script from folded_scripts where script_id = $1 and attribute_id  = $2 ", [script_id, attribute_id])[0]
        .script
)
const ret = script(val, listing)
return isNaN(ret) ? 0 : ret;
$$;

INSERT INTO scripts (attribute_id, name)
VALUES (3, 'Bad Words'),
       (55, 'Preis'),
       (48, 'WohnflÃ¤che'),
       (35, 'Location'),
       (3, 'Good Words');

INSERT INTO functions (function, name)
VALUES ('(val, row) => val / 200000', '/ 200 000'),
       ('(val, row) => val * 2', 'Prio 2'),
       ('(val, row) => val * 10', 'Prio 10'),
       ('(val, row) => "47.067393,15.442110," + val', 'Add Graz Jakominiplatz'),
       ('(val, row) => {
  const [lat1, lon1, lat2, lon2] = val.split(",");
  const radLat1 = lat1 * (Math.PI / 180);
  const radLon1 = lon1 * (Math.PI / 180);
  const radLat2 = lat2 * (Math.PI / 180);
  const radLon2 = lon2 * (Math.PI / 180);

  // Equirectangular formula
  const earthRadius = 6371000
  const x = (radLon2 - radLon1) * Math.cos(0.5 * (radLat2 + radLat1))
  const y = radLat2 - radLat1
  return earthRadius * Math.sqrt(x * x + y * y)
}', 'Distance between 2 Points'),
       ('(val, row) => Math.tanh(val)', 'tanh'),
       ('(val, row) =>  (8000 - val) / 8000', 'normalized 8000'),
       ('(val, row) =>  (val - 80) / 80', 'normalized 80'),
       ('(val, row) =>  (400000 - val) / 400000', 'normalized 400 000'),
       ('(val, row) =>  +(val.toLowerCase().includes("vermietet") || val.includes("BMS") || val.toLowerCase().includes("doppelhaus")) *-1',
        'Bad Words'),
       ('(val, row) =>  +(val.toLowerCase().includes("thal"))',
        'Good Words');

INSERT INTO script_functions (script_id, function_id, ord)
VALUES (1, 10, 1),
       (1, 3, 2),
       (2, 9, 1),
       (2, 6, 2),
       (2, 3, 3),
       (3, 8, 1),
       (3, 6, 2),
       (3, 3, 3),
       (4, 4, 1),
       (4, 5, 2),
       (4, 7, 3),
       (4, 6, 4),
       (4, 3, 5),
       (5, 11, 1),
       (5, 3, 2);
