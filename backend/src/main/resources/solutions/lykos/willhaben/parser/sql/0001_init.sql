CREATE TABLE schema_version
(
    patch_level      SMALLINT PRIMARY KEY,
    patch_file       TEXT,
    created_datetime TIMESTAMPTZ DEFAULT current_timestamp
);


CREATE TABLE watch_lists
(
    id  INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    url TEXT UNIQUE NOT NULL
);

INSERT INTO watch_lists(url)
VALUES ('https://www.willhaben.at/iad/immobilien/haus-kaufen/haus-angebote?isNavigation=true&areaId=601&areaId=603&areaId=606&areaId=616'),
       ('https://www.willhaben.at/iad/immobilien/eigentumswohnung/eigentumswohnung-angebote?isNavigation=true&areaId=601&areaId=603&areaId=606&areaId=616');

CREATE TABLE listings
(
    id               INT         NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_datetime TIMESTAMPTZ NOT NULL DEFAULT now(),
    last_seen        TIMESTAMPTZ NOT NULL DEFAULT now(),
    willhaben_id     INT         NOT NULL,
    hash             TEXT        NOT NULL UNIQUE,
    duplicate_hash   TEXT        NOT NULL,
    raw              JSONB       NOT NULL
);

CREATE INDEX ON listings (duplicate_hash);
CREATE INDEX ON listings (last_seen);

CREATE TYPE DATA_TYPE AS ENUM (
    'TEXT',
    'IMAGE',
    'LINK'
    );

CREATE TABLE attribute_mapping
(
    id SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
);

CREATE TABLE attributes
(
    id SMALLINT PRIMARY KEY REFERENCES attribute_mapping (id) ON DELETE CASCADE ON UPDATE CASCADE,
    attribute  TEXT NOT NULL UNIQUE,
    normalized TEXT GENERATED ALWAYS AS (
        lower(left(replace(initcap(replace(lower(split_part(attribute, '/', -1)), '_', ' ')), ' ', ''), 1)) ||
        right(replace(initcap(replace(lower(split_part(attribute, '/', -1)), '_', ' ')), ' ', ''), -1) ) STORED,
    label      TEXT,
    data_type  DATA_TYPE
);

CREATE TABLE listing_attributes
(
    listing_id   INT NOT NULL REFERENCES listings (id) ON DELETE CASCADE ON UPDATE CASCADE,
    attribute_id INT NOT NULL REFERENCES attribute_mapping (id) ON DELETE CASCADE ON UPDATE CASCADE,
    values       TEXT[],
    PRIMARY KEY (listing_id, attribute_id)
);

CREATE TABLE locations
(
    id          INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    lat         FLOAT,
    long        FLOAT,
    house_nr    TEXT,
    street      TEXT,
    city        TEXT,
    postal_code INT,
    district    TEXT,
    country     TEXT,
    plus_code   TEXT,
    place_id    TEXT
);

CREATE TABLE listing_locations
(
    listing_id  INT REFERENCES listings (id) ON DELETE CASCADE ON UPDATE CASCADE,
    location_id INT REFERENCES locations (id) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (listing_id, location_id)
);

CREATE TABLE user_defined_attributes
(
    listing_id   INT NOT NULL REFERENCES listings (id) ON DELETE CASCADE ON UPDATE CASCADE,
    attribute_id INT NOT NULL REFERENCES attribute_mapping (id) ON DELETE CASCADE ON UPDATE CASCADE,
    values       TEXT[],
    PRIMARY KEY (listing_id, attribute_id)
);

CREATE TABLE user_defined_locations
(
    listing_id  INT NOT NULL REFERENCES listings (id) ON DELETE CASCADE ON UPDATE CASCADE,
    location_id INT NOT NULL REFERENCES locations (id) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (listing_id, location_id)
);

CREATE OR REPLACE FUNCTION get_id()
    RETURNS TRIGGER
    LANGUAGE plpgsql
AS
$$
DECLARE
    new_id SMALLINT;
BEGIN
    WITH x AS (
        INSERT INTO attribute_mapping SELECT RETURNING id)
    SELECT id
    INTO new_id
    FROM x;

    new.id := new_id;
    RETURN new;
END;
$$;

CREATE TRIGGER trg_attribute_id
    BEFORE INSERT OR UPDATE
    ON attributes
    FOR EACH ROW
EXECUTE FUNCTION get_id();

CREATE MATERIALIZED VIEW duplicate_listings AS
SELECT c.id            AS listing_id,
       array_agg(s.id) AS sibblings
FROM listings c
         JOIN listings s
              ON c.duplicate_hash = s.duplicate_hash
GROUP BY c.id;

INSERT INTO attributes (attribute, label, data_type)
VALUES ('SEO_URL', 'Link', 'LINK'),
       ('MMO', 'Bild', 'IMAGE'),
       ('HEADING', 'Titel', 'TEXT'),
       ('ORGNAME', NULL, NULL),
       ('ORG_UUID', NULL, NULL),
       ('LOCATION_QUALITY', NULL, NULL),
       ('LOCATION_ID', NULL, NULL),
       ('ADTYPE_ID', NULL, NULL),
       ('ORGID', NULL, NULL),
       ('PUBLISHED_String', NULL, NULL),
       ('ESTATE_PREFERENCE', NULL, NULL),
       ('UPSELLING_AD_SEARCHRESULT', NULL, NULL),
       ('categorytreeids', NULL, NULL),
       ('ADVERTISER_REF', NULL, NULL),
       ('PRODUCT_ID', NULL, NULL),
       ('IS_BUMPED', NULL, NULL),
       ('AD_UUID', NULL, NULL),
       ('AD_SEARCHRESULT_LOGO', NULL, NULL),
       ('ISPRIVATE', NULL, NULL),
       ('PROPERTY_TYPE_HOUSE', NULL, NULL),
       ('UNIT_TITLE', NULL, NULL),
       ('ESTATE_SIZE/USEABLE_AREA', NULL, NULL),
       ('VIRTUAL_VIEW_LINK', NULL, NULL),
       ('PROJECT/UNIT_PRICE_FROM', NULL, NULL),
       ('NUMBER_OF_CHILDREN', NULL, NULL),
       ('PROJECT_ID', NULL, NULL),
       ('UNIT_NUMBER', NULL, NULL),
       ('RESULT_LIST_TOPAD', NULL, NULL),
       ('RESULT_LIST_STYLE2', NULL, NULL),
       ('DISPOSED', NULL, NULL),
       ('PROPERTY_TYPE_FLAT', NULL, NULL),
       ('FREE_AREA/FREE_AREA_AREA_TOTAL', 'Freifläche', 'TEXT'),
       ('ADDRESS', 'Addresse', 'TEXT'),
       ('ESTATE_SIZE', 'Grundstückfläche', 'TEXT'),
       ('COORDINATES', 'Koordinaten', 'TEXT'),
       ('PUBLISHED', 'Veröffentlicht', 'TEXT'),
       ('PRICE_FOR_DISPLAY', 'Preis Formattiert', 'TEXT'),
       ('NUMBER_OF_ROOMS', 'Räume', 'TEXT'),
       ('DISTRICT', 'Bezirk', 'TEXT'),
       ('FREE_AREA_TYPE_NAME', 'Freiflächentyp', 'TEXT'),
       ('ADID', 'WillhabenID', 'TEXT'),
       ('BODY_DYN', 'Inhalt', 'TEXT'),
       ('COUNTRY', 'Land', 'TEXT'),
       ('ALL_IMAGE_URLS', 'Bilder', 'TEXT'),
       ('PROPERTY_TYPE_ID', 'Typ ID', 'TEXT'),
       ('imagedescription', 'Bildbeschreibung', 'TEXT'),
       ('PROPERTY_TYPE', 'Typ', 'TEXT'),
       ('ESTATE_SIZE/LIVING_AREA', 'Wohnfläche', 'TEXT'),
       ('POSTCODE', 'Postleitzahl', 'TEXT'),
       ('ROOMS', 'Zimmer', 'TEXT'),
       ('FREE_AREA_TYPE', 'Freiflächentyp', 'TEXT'),
       ('FLOOR', 'Stock', 'TEXT'),
       ('ESTATE_PRICE/PRICE_SUGGESTION', 'Preisvorschlag', 'TEXT'),
       ('STATE', 'Bundesland', 'TEXT'),
       ('PRICE', 'Preis', 'TEXT'),
       ('LOCATION', 'Ort', 'TEXT');

